{'TMP': 'C:\\Users\\SoBeIt\\AppData\\Local\\Temp', 'COMPUTERNAME': 'SOBEIT-PC', 'USERDOMAIN': 'SoBeIt-PC', 'VS100COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\Tools\\', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'ANDROID_NDK': 'C:\\Development\\Android-NDK-r9c', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3a09', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Development\\Python\\Python27_64;C:\\Development\\Python\\Python27_64\\Scripts;C:\\Development\\Java\\jdk1.8.0_20\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Development\\Python\\Python27\\Scripts;C:\\Project\\Perl\\site\\bin;C:\\Project\\Perl\\bin;C:\\Perl\\site\\bin;C:\\Perl\\bin;C:\\Program Files (x86)\\RSA SecurID Token Common;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\WIDCOMM\\Bluetooth Software\\;C:\\Program Files\\WIDCOMM\\Bluetooth Software\\syswow64;C:\\Project\\strawberry\\c\\bin;C:\\Project\\strawberry\\perl\\site\\bin;C:\\Project\\strawberry\\perl\\bin;C:\\Development\\Java\\jdk1.7.0_51\\bin;C:\\Development\\Android-SDK\\tools;C:\\Development\\Android-SDK\\platform-tools;C:\\Development\\Android-NDK-r9c;C:\\Development\\Android-SDK;C:\\Work\\Tools;C:\\Development\\Python\\Python27;C:\\Program Files (x86)\\010 Editor;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files (x86)\\Subversion\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\Development\\PHP;C:\\Development\\PHP\\ext;C:\\Program Files (x86)\\Tesseract-OCR;C:\\Development\\Android-SDK\\build-tools\\20.0.0;D:\\Database\\MySQL\\MySQL Utilities 1.4.3\\;D:\\Database\\MySQL\\MySQL Utilities 1.4.3\\Doctrine extensions for PHP\\;C:\\Development\\nodejs\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Development\\Ruby\\Ruby200\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Nmap;C:\\Program Files\\Boot2Docker for Windows;C:\\Users\\SoBeIt\\AppData\\Roaming\\npm;.;', 'SYSTEMROOT': 'C:\\Windows', 'ANDROID_SDK': 'C:\\Development\\Android-SDK', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'WINDOWS_TRACING_FLAGS': '3', 'TERM': 'dumb', 'TESSDATA_PREFIX': 'C:\\Program Files (x86)\\Tesseract-OCR\\', 'TEMP': 'C:\\Users\\SoBeIt\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'DEVMGR_SHOW_NONPRESENT_DEVICES': '1', 'APR_ICONV_PATH': 'C:\\Program Files (x86)\\Subversion\\iconv', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\SoBeIt', 'LOCALAPPDATA': 'C:\\Users\\SoBeIt\\AppData\\Local', 'HOMEPATH': '\\Users\\SoBeIt', 'JAVA_HOME': 'C:\\Development\\Java\\jdk1.8.0_20', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'SoBeIt', 'LOGONSERVER': '\\\\SOBEIT-PC', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'C:\\Development\\Python\\Python27', 'DEVMGR_SHOW_DETAILS': '1', 'MTPPKROOT': 'C:\\Development\\WMSDK\\MTPPK12\\Responder', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.RB;.RBW', 'ASL.LOG': 'Destination=file', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\SoBeIt\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PYTHON27': 'C:\\Development\\Python\\Python27', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'WIX': 'C:\\Program Files (x86)\\WiX Toolset v3.8\\'}